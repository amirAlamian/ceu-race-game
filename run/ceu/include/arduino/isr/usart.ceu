/* TODO: only working with original Arduino */

#include "arduino/avr.ceu"

native/pure _BAUD_USART;
native/pre do
#ifdef __AVR_ATmega644P__
    ##define BAUD_USART(baud_human) (((F_CPU / (baud_human * 16UL))) - 1)
#else
    ##define BAUD_USART(baud_human) ((F_CPU / 4 / baud_human - 1) / 2)
#endif
end

input void USART_RX;
input void USART_TX;

data IUsart with
    var   Lock l;
    event void ok_rx;
end

code/await Usart (var int speed, var&[] byte rx)
                    -> (var IUsart usart)
                        -> FOREVER
do
    usart = _;
    spawn async/isr [_USART_RX_vect_num,0] do
        var byte c = _UDR0;
        outer.rx = outer.rx..[c];
        emit USART_RX;
    end

    spawn async/isr [_USART_TX_vect_num,0] do
        emit USART_TX;
    end

    _UBRR0H = (_BAUD_USART(speed)>>8) as byte;  // set baud rate
    _UBRR0L = (_BAUD_USART(speed)) as byte;
    _UCSR0C = (1<<_USBS0)|(3<<_UCSZ00);         // 8data, 2stop-bit
    _UCSR0B = (1<<_RXEN0)  | (1<<_TXEN0)        // enable RX/TX
            | (1<<_RXCIE0) | (1<<_TXCIE0);      // enable interrupts
    do finalize with
        _UCSR0B = 0;                            // disable TX/RX & interrups
    end

    every USART_RX do
        emit usart.ok_rx;
    end
end

// TODO: move to inside Usart

code/await Usart_TX (var& IUsart usart, var&[] byte buf) -> void
do
    lock usart.l do
        var usize i;
        loop i in [0->$buf[ do
            _ceu_dbg_assert(_UCSR0A & (1<<_UDRE0));
            _UDR0 = buf[i];
            await USART_TX;
        end
    end
end
